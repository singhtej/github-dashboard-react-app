{"version":3,"sources":["Components/Rolling-1.5s-264px.gif","Components/Cards.js","Components/Loader.js","Components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","className","project","name","href","description","Loader","src","loading","alt","style","width","margin","display","Homepage","state","projects","this","setState","axios","get","process","response","data","map","key","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,gD,yPCiB5BC,MAff,SAAeC,GAEb,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,QAAQC,MACnB,8BACE,uBAAGF,UAAU,SAASG,KALhB,uCAK4BJ,EAAME,QAAQC,MAAhD,iBAIF,2BAAIH,EAAME,QAAQG,e,iBCFTC,MARf,WACI,OACI,kBAAC,WAAD,KACI,yBAAKC,IAAKC,IAASC,IAAI,aAAaC,MAAO,CAACC,MAAM,QAASC,OAAQ,OAAOC,QAAQ,aCyC/EC,E,2MAzCbC,MAAQ,CACNC,SAAU,GACVR,SAAS,G,0MAITS,KAAKC,SAAS,CAAEV,SAAS,I,SACFW,IAAMC,IAAN,yEAC6CC,uBAD7C,0BAC8FA,6C,OAD/GC,E,OAGNL,KAAKC,SAAS,CAAEF,SAAUM,EAASC,KAAMf,SAAS,I,qIAGlD,OAAIS,KAAKT,QAEL,yBAAKP,UAAU,cACb,kBAAC,EAAD,OAKF,6BACE,yBAAKA,UAAU,cACb,yBACEA,UAAU,WACVM,IAAI,wDACJE,IAAI,SAEN,wBAAIR,UAAU,aAAd,wCAEF,yBAAKA,UAAU,SACZgB,KAAKF,MAAMC,SAASQ,KAAI,SAAAtB,GACvB,OAAO,kBAAC,EAAD,CAAOuB,IAAKvB,EAAQwB,GAAIxB,QAASA,a,GAjC/ByB,aCMRC,EANH,WACV,OACC,kBAAC,EAAD,OCMiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.033789a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rolling-1.5s-264px.5de5d82a.gif\";","import React from \"react\";\r\n\r\nfunction Cards(props) {\r\n  const url = \"https://vignesh-narendran.github.io/\";\r\n  return (\r\n    <div className=\"card\">\r\n      <h2>{props.project.name}</h2>\r\n      <span>\r\n        <a className=\"button\" href={url + props.project.name}>\r\n          View Project\r\n        </a>\r\n      </span>\r\n      <p>{props.project.description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React, {Fragment} from 'react'\r\nimport loading from './Rolling-1.5s-264px.gif';\r\nfunction Loader() {\r\n    return (\r\n        <Fragment>\r\n            <img src={loading} alt=\"Loading...\" style={{width:'100px', margin: 'auto',display:'block'}}/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Cards from \"./Cards\";\r\nimport Loader from \"./Loader\";\r\nclass Homepage extends Component {\r\n  state = {\r\n    projects: [],\r\n    loading: false\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.setState({ loading: true });\r\n    const response = await axios.get(\r\n      `https://api.github.com/users/vignesh-narendran/repos?client_id=${process.env.REACT_APP_GITHUB_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\r\n    );\r\n    this.setState({ projects: response.data, loading: false });\r\n  }\r\n  render() {\r\n    if (this.loading) {\r\n      return (\r\n        <div className=\"App-header\">\r\n          <Loader />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div className=\"App-header\">\r\n            <img\r\n              className=\"App-logo\"\r\n              src=\"https://avatars0.githubusercontent.com/u/42290823?v=4\"\r\n              alt=\"logo\"\r\n            />\r\n            <h3 className=\"App-title\">Vignesh Narendran's GitHub projects</h3>\r\n          </div>\r\n          <div className=\"cards\">\r\n            {this.state.projects.map(project => {\r\n              return <Cards key={project.id} project={project} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\nimport './App.css';\nimport Homepage from './Components/Homepage';\n\nconst App = () => {\n  return (\n   <Homepage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}